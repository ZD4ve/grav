@startuml grav

package hf {
    class Main {
        + {static} main(args: String[])
    }
}

package hf.engine {
    class Vec2 {
        + x: double
        + y: double
    }
    class SimParameters << (S,#FF7700) Singleton >> {
        - data: List<Vec2>
        - simRunning: bool
        __
        + {static} getInstance() : SimParameters
        ..getters/setters..
    }
    note bottom of SimParameters
        Communication channel
        between GUI and engine
        (Controller)
    end note
    class Space {
        + simulate()
    }
    class Star {
        + calculateAccelaration(a: Star, b: Star) : Vec2
        + tick(acceleration: Vec2, dt: double)
    }
}

package hf.gui {
    class GravFrame
    class ColorTheme << (U,Orchid) Utility >>
    class ControlPanel
    class ButtonPanel {
        - play: JButton
        - reset: JButton
        - recenter: JButton
        - save: JButton
        - load: JButton
    }
    class VectorInputPanel {
        - readData()
        + readInput()
        + lock()
        + unlock()
    }
    class Dial {
        + paintComponent()
    }
    class Observatory {
        + paintComponent()
    }
    class Renderer {
        + addComponent(JComponent)
        - paintAll()
    }
    note top of Renderer
        Redraws components with 
        custom paint methods
    end note
}

' Main
Main *-- GravFrame
Main *-- Space

' Engine
Space *-- "3" Star
SimParameters *-- "6" Vec2

' GUI
VectorInputPanel *-- Dial
GravFrame *-- ControlPanel
GravFrame *-- Observatory
GravFrame *-- Renderer
ControlPanel *-- ButtonPanel
ControlPanel *-- "6" VectorInputPanel

' params
Observatory --> SimParameters
VectorInputPanel --> SimParameters
Star --> SimParameters
Space --> SimParameters
Star o.. Vec2 : "pos"
Star o.. Vec2 : "vel"
VectorInputPanel o.. Vec2


@enduml
